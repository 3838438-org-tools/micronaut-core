/*
 * Copyright 2017-2019 original authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.micronaut.inject.beans;

import io.micronaut.core.annotation.AnnotationMetadata;
import io.micronaut.core.annotation.Internal;
import io.micronaut.core.annotation.UsedByGeneratedCode;
import io.micronaut.core.beans.BeanIntrospection;
import io.micronaut.core.beans.BeanProperty;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

/**
 * Abstract implementation of {@link BeanProperty}. Generated byte code should be used to create a subclass
 * and implement the {@link BeanProperty#read(Object)} and {@link BeanProperty#write(Object, Object)} methods.
 *
 * @param <B> The bean type
 * @param <P> The property type
 *
 * @author graemerocher
 * @since 1.1
 */
@UsedByGeneratedCode
@Internal
public abstract class AbstractBeanProperty<B, P> implements BeanProperty<B, P> {

    private final BeanIntrospection<B> introspection;
    private final Class<P> type;
    private final String name;
    private final AnnotationMetadata annotationMetadata;

    /**
     * Default constructor.
     * @param introspection The parent introspection
     * @param type The property type
     * @param name The property name
     * @param annotationMetadata The annotation metadata
     */
    @Internal
    @UsedByGeneratedCode
    protected AbstractBeanProperty(
            @Nonnull BeanIntrospection<B> introspection,
            @Nonnull Class<P> type,
            @Nonnull String name,
            @Nullable AnnotationMetadata annotationMetadata) {
        this.introspection = introspection;
        this.type = type;
        this.name = name;
        this.annotationMetadata = annotationMetadata == null ? AnnotationMetadata.EMPTY_METADATA : annotationMetadata;
    }

    @Override public @Nonnull String getName() {
        return name;
    }

    @Nonnull
    @Override
    public Class<P> getType() {
        return type;
    }

    @Nonnull
    @Override
    public BeanIntrospection<B> getDeclaringBean() {
        return introspection;
    }

    @Override
    public AnnotationMetadata getAnnotationMetadata() {
        return annotationMetadata;
    }
}
